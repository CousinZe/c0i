(define (list-length list)
  (define (list-length-impl list n)
    (cond ((= nil list) n)
          (else (list-length-impl (cdr list) (+ n 1)))))
  (list-length-impl list 0))

(define (list-ref list n)
  (define (list-ref-impl list n)
    (cond ((= n 0) (car list))
          (else (list-ref-impl (cdr list) (- n 1)))))
  (cond ((>= n (list-length list)) (raise "IndexOutOfBounds"))
        (else (list-ref-impl list n))))

(define (map f list)
  (cond ((= nil list) nil)
        (else (cons (f (car list)) (map f (cdr list))))))

(define (fibonacci n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

(define (dbg-int-fn x)
  (dbg-int x))

(define (application-start)
  (define the-list '(1 2 3 4 5 6 7 8 9 10))
  (dbg-str "the length of the list is")
  (dbg-int (list-length the-list))
  (dbg-str "the last element of the list is")
  (dbg-int (list-ref the-list (- (list-length the-list) 1)))
  (dbg-str "calculating fibonacci")
  (map dbg-int-fn (map fibonacci the-list)))
